/* Do not edit this file. It was automatically generated. */

#ifndef HEADER_Vector
#define HEADER_Vector
/*
htop - Vector.h
(C) 2004-2011 Hisham H. Muhammad
Released under the GNU GPL, see the COPYING file
in the source distribution for its full text.
*/

#include "Object.h"

#include <assert.h>

#ifndef DEFAULT_SIZE
#define DEFAULT_SIZE -1
#endif

typedef struct Vector_ {
   Object **array;
   ObjectClass* type;
   int arraySize;
   int growthRate;
   int items;
   bool owner;
} Vector;


Vector* Vector_new(ObjectClass* type, bool owner, int size);

void Vector_delete(Vector* this);

#ifdef DEBUG

int Vector_count(Vector* this);

#endif

void Vector_prune(Vector* this);

// If I were to use only one sorting algorithm for both cases, it would probably be this one:
/*

*/

void Vector_quickSort(Vector* this);

void Vector_insertionSort(Vector* this);

void Vector_insert(Vector* this, int idx, void* data_);

Object* Vector_take(Vector* this, int idx);

Object* Vector_remove(Vector* this, int idx);

void Vector_moveUp(Vector* this, int idx);

void Vector_moveDown(Vector* this, int idx);

void Vector_set(Vector* this, int idx, void* data_);

// Prototype:
// inline Object* Vector_get(Vector* this, int idx);
#define Vector_get(this_, idx_) \
           (assert((idx_) < (this_)->items), \
            assert(Vector_isConsistent(this_)), \
            (this_)->array[idx_])

extern int Vector_size(Vector* this);

/*

*/

void Vector_add(Vector* this, void* data_);

extern int Vector_indexOf(Vector* this, void* search_, Object_Compare compare);

#endif
