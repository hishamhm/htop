/* Do not edit this file. It was automatically generated. */

#ifndef HEADER_Panel
#define HEADER_Panel
/*
htop - Panel.h
(C) 2004-2011 Hisham H. Muhammad
Released under the GNU GPL, see the COPYING file
in the source distribution for its full text.
*/

//#link curses

#include "Object.h"
#include "Vector.h"

typedef struct Panel_ Panel;

typedef enum HandlerResult_ {
   HANDLED,
   IGNORED,
   BREAK_LOOP
} HandlerResult;

#define EVENT_SETSELECTED -1

typedef HandlerResult(*Panel_EventHandler)(Panel*, int);

typedef struct PanelClass_ {
   const ObjectClass super;
   const Panel_EventHandler eventHandler;
} PanelClass;

#define As_Panel(htop_this_)                ((PanelClass*)((htop_this_)->super.klass))
#define Panel_eventHandlerFn(htop_this_)    As_Panel(htop_this_)->eventHandler
#define Panel_eventHandler(htop_this_, ev_) As_Panel(htop_this_)->eventHandler((Panel*)(htop_this_), ev_)

struct Panel_ {
   Object super;
   PanelClass* class;
   int x, y, w, h;
   WINDOW* window;
   Vector* items;
   int selected;
   int scrollV, scrollH;
   int scrollHAmount;
   int oldSelected;
   bool needsRedraw;
   RichString header;
   char* eventHandlerBuffer;
};


#ifndef MIN
#define MIN(a,b) ((a)<(b)?(a):(b))
#endif
#ifndef MAX
#define MAX(a,b) ((a)>(b)?(a):(b))
#endif

#define KEY_CTRLN      0016            /* control-n key */
#define KEY_CTRLP      0020            /* control-p key */
#define KEY_CTRLF      0006            /* control-f key */
#define KEY_CTRLB      0002            /* control-b key */

extern PanelClass Panel_class;

Panel* Panel_new(int x, int y, int w, int h, bool owner, ObjectClass* type);

void Panel_delete(Object* cast);

void Panel_init(Panel* htop_this, int x, int y, int w, int h, ObjectClass* type, bool owner);

void Panel_done(Panel* htop_this);

RichString* Panel_getHeader(Panel* htop_this);

extern void Panel_setHeader(Panel* htop_this, const char* header);

void Panel_move(Panel* htop_this, int x, int y);

void Panel_resize(Panel* htop_this, int w, int h);

void Panel_prune(Panel* htop_this);

void Panel_add(Panel* htop_this, Object* o);

void Panel_insert(Panel* htop_this, int i, Object* o);

void Panel_set(Panel* htop_this, int i, Object* o);

Object* Panel_get(Panel* htop_this, int i);

Object* Panel_remove(Panel* htop_this, int i);

Object* Panel_getSelected(Panel* htop_this);

void Panel_moveSelectedUp(Panel* htop_this);

void Panel_moveSelectedDown(Panel* htop_this);

int Panel_getSelectedIndex(Panel* htop_this);

int Panel_size(Panel* htop_this);

void Panel_setSelected(Panel* htop_this, int selected);

void Panel_draw(Panel* htop_this, bool focus);

bool Panel_onKey(Panel* htop_this, int key);

HandlerResult Panel_selectByTyping(Panel* htop_this, int ch);

#endif
